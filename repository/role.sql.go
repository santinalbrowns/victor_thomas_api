// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: role.sql

package repository

import (
	"context"
)

const findRole = `-- name: FindRole :one
SELECT id, name, created_at FROM roles WHERE id = ?
`

func (q *Queries) FindRole(ctx context.Context, id uint64) (Role, error) {
	row := q.db.QueryRowContext(ctx, findRole, id)
	var i Role
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const findRoleByName = `-- name: FindRoleByName :one
SELECT id, name, created_at FROM roles WHERE name = ?
`

func (q *Queries) FindRoleByName(ctx context.Context, name string) (Role, error) {
	row := q.db.QueryRowContext(ctx, findRoleByName, name)
	var i Role
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const insertRole = `-- name: InsertRole :execlastid
INSERT INTO roles (name) VALUES (?)
`

func (q *Queries) InsertRole(ctx context.Context, name string) (int64, error) {
	result, err := q.db.ExecContext(ctx, insertRole, name)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}
