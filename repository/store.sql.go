// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: store.sql

package repository

import (
	"context"
)

const countStores = `-- name: CountStores :one
SELECT COUNT(*) AS count
FROM stores
`

func (q *Queries) CountStores(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countStores)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const deleteStore = `-- name: DeleteStore :exec
DELETE FROM stores
WHERE id = ?
`

func (q *Queries) DeleteStore(ctx context.Context, id uint64) error {
	_, err := q.db.ExecContext(ctx, deleteStore, id)
	return err
}

const findStore = `-- name: FindStore :one
SELECT id, slug, name, status FROM stores
WHERE id = ?
`

func (q *Queries) FindStore(ctx context.Context, id uint64) (Store, error) {
	row := q.db.QueryRowContext(ctx, findStore, id)
	var i Store
	err := row.Scan(
		&i.ID,
		&i.Slug,
		&i.Name,
		&i.Status,
	)
	return i, err
}

const findStoreBySlug = `-- name: FindStoreBySlug :one
SELECT id, slug, name, status FROM stores
WHERE slug = ?
`

func (q *Queries) FindStoreBySlug(ctx context.Context, slug string) (Store, error) {
	row := q.db.QueryRowContext(ctx, findStoreBySlug, slug)
	var i Store
	err := row.Scan(
		&i.ID,
		&i.Slug,
		&i.Name,
		&i.Status,
	)
	return i, err
}

const findStores = `-- name: FindStores :many
SELECT id, slug, name, status FROM stores
ORDER BY id DESC
LIMIT ? OFFSET ?
`

type FindStoresParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) FindStores(ctx context.Context, arg FindStoresParams) ([]Store, error) {
	rows, err := q.db.QueryContext(ctx, findStores, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Store
	for rows.Next() {
		var i Store
		if err := rows.Scan(
			&i.ID,
			&i.Slug,
			&i.Name,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertStore = `-- name: InsertStore :execlastid
INSERT INTO stores (slug, name, status)
VALUES (?, ?, ?)
`

type InsertStoreParams struct {
	Slug   string `json:"slug"`
	Name   string `json:"name"`
	Status bool   `json:"status"`
}

func (q *Queries) InsertStore(ctx context.Context, arg InsertStoreParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, insertStore, arg.Slug, arg.Name, arg.Status)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const searchStores = `-- name: SearchStores :many
SELECT id, slug, name, status FROM stores
WHERE name LIKE ?
ORDER BY id DESC
LIMIT ? OFFSET ?
`

type SearchStoresParams struct {
	Name   string `json:"name"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

func (q *Queries) SearchStores(ctx context.Context, arg SearchStoresParams) ([]Store, error) {
	rows, err := q.db.QueryContext(ctx, searchStores, arg.Name, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Store
	for rows.Next() {
		var i Store
		if err := rows.Scan(
			&i.ID,
			&i.Slug,
			&i.Name,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateStore = `-- name: UpdateStore :exec
UPDATE stores
SET 
    name = COALESCE(?, name),
    slug = COALESCE(?, slug),
    status = COALESCE(?, status)
WHERE id = ?
`

type UpdateStoreParams struct {
	Name   string `json:"name"`
	Slug   string `json:"slug"`
	Status bool   `json:"status"`
	ID     uint64 `json:"id"`
}

func (q *Queries) UpdateStore(ctx context.Context, arg UpdateStoreParams) error {
	_, err := q.db.ExecContext(ctx, updateStore,
		arg.Name,
		arg.Slug,
		arg.Status,
		arg.ID,
	)
	return err
}
