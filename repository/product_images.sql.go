// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: product_images.sql

package repository

import (
	"context"
)

const assignProductImage = `-- name: AssignProductImage :exec
INSERT INTO product_images (product_id, image_id) VALUES (?, ?)
`

type AssignProductImageParams struct {
	ProductID uint64 `json:"product_id"`
	ImageID   uint64 `json:"image_id"`
}

func (q *Queries) AssignProductImage(ctx context.Context, arg AssignProductImageParams) error {
	_, err := q.db.ExecContext(ctx, assignProductImage, arg.ProductID, arg.ImageID)
	return err
}

const findProductImages = `-- name: FindProductImages :many
SELECT i.id, i.name
FROM images AS i
JOIN product_images AS pi ON pi.image_id = i.id
WHERE pi.product_id = ?
`

type FindProductImagesRow struct {
	ID   uint64 `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) FindProductImages(ctx context.Context, productID uint64) ([]FindProductImagesRow, error) {
	rows, err := q.db.QueryContext(ctx, findProductImages, productID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindProductImagesRow
	for rows.Next() {
		var i FindProductImagesRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
