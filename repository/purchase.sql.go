// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: purchase.sql

package repository

import (
	"context"
	"database/sql"
	"time"
)

const countPurchases = `-- name: CountPurchases :one
SELECT COUNT(*) AS count
FROM purchases
`

func (q *Queries) CountPurchases(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countPurchases)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const deletePurchase = `-- name: DeletePurchase :exec
DELETE FROM purchases
WHERE id = ?
`

func (q *Queries) DeletePurchase(ctx context.Context, id uint64) error {
	_, err := q.db.ExecContext(ctx, deletePurchase, id)
	return err
}

const findPurchase = `-- name: FindPurchase :one
SELECT id, product_id, date, quantity, order_price, selling_price, store_id, user_id, created_at, updated_at FROM purchases WHERE id  = ?
`

func (q *Queries) FindPurchase(ctx context.Context, id uint64) (Purchase, error) {
	row := q.db.QueryRowContext(ctx, findPurchase, id)
	var i Purchase
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.Date,
		&i.Quantity,
		&i.OrderPrice,
		&i.SellingPrice,
		&i.StoreID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findPurchaseByProductSKU = `-- name: FindPurchaseByProductSKU :many
SELECT s.id, s.product_id, s.date, s.quantity, s.order_price, s.selling_price, s.store_id, s.user_id, s.created_at, s.updated_at FROM purchases s
JOIN products p ON p.id = s.product_id
WHERE p.sku = ?
ORDER BY id DESC
LIMIT ? OFFSET ?
`

type FindPurchaseByProductSKUParams struct {
	Sku    string `json:"sku"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

func (q *Queries) FindPurchaseByProductSKU(ctx context.Context, arg FindPurchaseByProductSKUParams) ([]Purchase, error) {
	rows, err := q.db.QueryContext(ctx, findPurchaseByProductSKU, arg.Sku, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Purchase
	for rows.Next() {
		var i Purchase
		if err := rows.Scan(
			&i.ID,
			&i.ProductID,
			&i.Date,
			&i.Quantity,
			&i.OrderPrice,
			&i.SellingPrice,
			&i.StoreID,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findPurchases = `-- name: FindPurchases :many
SELECT id, product_id, date, quantity, order_price, selling_price, store_id, user_id, created_at, updated_at FROM purchases
ORDER BY id DESC
LIMIT ? OFFSET ?
`

type FindPurchasesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) FindPurchases(ctx context.Context, arg FindPurchasesParams) ([]Purchase, error) {
	rows, err := q.db.QueryContext(ctx, findPurchases, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Purchase
	for rows.Next() {
		var i Purchase
		if err := rows.Scan(
			&i.ID,
			&i.ProductID,
			&i.Date,
			&i.Quantity,
			&i.OrderPrice,
			&i.SellingPrice,
			&i.StoreID,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertPurchase = `-- name: InsertPurchase :execlastid
INSERT INTO purchases (product_id, date, quantity, order_price, selling_price, store_id, user_id)
VALUES (?, ?, ?, ?, ?, ?, ?)
`

type InsertPurchaseParams struct {
	ProductID    uint64        `json:"product_id"`
	Date         time.Time     `json:"date"`
	Quantity     int32         `json:"quantity"`
	OrderPrice   float64       `json:"order_price"`
	SellingPrice float64       `json:"selling_price"`
	StoreID      sql.NullInt64 `json:"store_id"`
	UserID       sql.NullInt64 `json:"user_id"`
}

func (q *Queries) InsertPurchase(ctx context.Context, arg InsertPurchaseParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, insertPurchase,
		arg.ProductID,
		arg.Date,
		arg.Quantity,
		arg.OrderPrice,
		arg.SellingPrice,
		arg.StoreID,
		arg.UserID,
	)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}
