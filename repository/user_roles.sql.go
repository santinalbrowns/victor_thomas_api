// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user_roles.sql

package repository

import (
	"context"
)

const assignUserRole = `-- name: AssignUserRole :exec
INSERT INTO user_roles (user_id, role_id) VALUES (?, ?)
`

type AssignUserRoleParams struct {
	UserID uint64 `json:"user_id"`
	RoleID uint64 `json:"role_id"`
}

func (q *Queries) AssignUserRole(ctx context.Context, arg AssignUserRoleParams) error {
	_, err := q.db.ExecContext(ctx, assignUserRole, arg.UserID, arg.RoleID)
	return err
}

const checkUserRole = `-- name: CheckUserRole :one
SELECT COUNT(*) > 0
FROM user_roles
WHERE user_id = ? AND role_id = ?
`

type CheckUserRoleParams struct {
	UserID uint64 `json:"user_id"`
	RoleID uint64 `json:"role_id"`
}

func (q *Queries) CheckUserRole(ctx context.Context, arg CheckUserRoleParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkUserRole, arg.UserID, arg.RoleID)
	var column_1 bool
	err := row.Scan(&column_1)
	return column_1, err
}

const findUserRoles = `-- name: FindUserRoles :many
SELECT r.id, r.name
FROM roles AS r
JOIN user_roles AS ur ON ur.role_id = r.id
WHERE ur.user_id = ?
`

type FindUserRolesRow struct {
	ID   uint64 `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) FindUserRoles(ctx context.Context, userID uint64) ([]FindUserRolesRow, error) {
	rows, err := q.db.QueryContext(ctx, findUserRoles, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindUserRolesRow
	for rows.Next() {
		var i FindUserRolesRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
