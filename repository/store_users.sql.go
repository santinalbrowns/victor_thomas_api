// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: store_users.sql

package repository

import (
	"context"
)

const assignStoreUser = `-- name: AssignStoreUser :exec
INSERT INTO store_users (store_id, user_id) VALUES (?, ?)
`

type AssignStoreUserParams struct {
	StoreID uint64 `json:"store_id"`
	UserID  uint64 `json:"user_id"`
}

func (q *Queries) AssignStoreUser(ctx context.Context, arg AssignStoreUserParams) error {
	_, err := q.db.ExecContext(ctx, assignStoreUser, arg.StoreID, arg.UserID)
	return err
}

const checkStoreUser = `-- name: CheckStoreUser :one
SELECT COUNT(*) > 0
FROM store_users
WHERE store_id = ? AND user_id = ?
`

type CheckStoreUserParams struct {
	StoreID uint64 `json:"store_id"`
	UserID  uint64 `json:"user_id"`
}

func (q *Queries) CheckStoreUser(ctx context.Context, arg CheckStoreUserParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkStoreUser, arg.StoreID, arg.UserID)
	var column_1 bool
	err := row.Scan(&column_1)
	return column_1, err
}

const deleteStoreUser = `-- name: DeleteStoreUser :exec
DELETE FROM store_users
WHERE store_id = ? AND user_id = ?
`

type DeleteStoreUserParams struct {
	StoreID uint64 `json:"store_id"`
	UserID  uint64 `json:"user_id"`
}

func (q *Queries) DeleteStoreUser(ctx context.Context, arg DeleteStoreUserParams) error {
	_, err := q.db.ExecContext(ctx, deleteStoreUser, arg.StoreID, arg.UserID)
	return err
}

const findStoreUsers = `-- name: FindStoreUsers :many
SELECT u.id, u.firstname, u.lastname, u.email, u.phone, u.password
FROM store_users AS su
JOIN users AS u ON u.id = su.user_id
WHERE su.store_id = ?
`

func (q *Queries) FindStoreUsers(ctx context.Context, storeID uint64) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, findStoreUsers, storeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Firstname,
			&i.Lastname,
			&i.Email,
			&i.Phone,
			&i.Password,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
