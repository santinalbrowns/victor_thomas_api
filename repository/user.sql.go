// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package repository

import (
	"context"
)

const findUserByEmail = `-- name: FindUserByEmail :one
SELECT id, firstname, lastname, email, phone, password FROM users WHERE email = ?
`

func (q *Queries) FindUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, findUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Firstname,
		&i.Lastname,
		&i.Email,
		&i.Phone,
		&i.Password,
	)
	return i, err
}

const findUserByID = `-- name: FindUserByID :one
SELECT id, firstname, lastname, email, phone, password FROM users WHERE id = ? LIMIT 1
`

func (q *Queries) FindUserByID(ctx context.Context, id uint64) (User, error) {
	row := q.db.QueryRowContext(ctx, findUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Firstname,
		&i.Lastname,
		&i.Email,
		&i.Phone,
		&i.Password,
	)
	return i, err
}

const findUserStore = `-- name: FindUserStore :one
SELECT s.id, s.slug, s.name, s.status FROM stores s
JOIN store_users su ON su.store_id = s.id
JOIN users u ON u.id = su.user_id 
WHERE u.id = ?
LIMIT 1
`

func (q *Queries) FindUserStore(ctx context.Context, id uint64) (Store, error) {
	row := q.db.QueryRowContext(ctx, findUserStore, id)
	var i Store
	err := row.Scan(
		&i.ID,
		&i.Slug,
		&i.Name,
		&i.Status,
	)
	return i, err
}

const findUserStores = `-- name: FindUserStores :many
SELECT s.id, s.slug, s.name, s.status FROM stores s
JOIN store_users su ON su.store_id = s.id
JOIN users u ON u.id = su.user_id 
WHERE u.id = ?
`

func (q *Queries) FindUserStores(ctx context.Context, id uint64) ([]Store, error) {
	rows, err := q.db.QueryContext(ctx, findUserStores, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Store
	for rows.Next() {
		var i Store
		if err := rows.Scan(
			&i.ID,
			&i.Slug,
			&i.Name,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertUser = `-- name: InsertUser :execlastid
INSERT INTO users (firstname, lastname, email, password) VALUES (?, ?, ?, ?)
`

type InsertUserParams struct {
	Firstname string `json:"firstname"`
	Lastname  string `json:"lastname"`
	Email     string `json:"email"`
	Password  string `json:"password"`
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, insertUser,
		arg.Firstname,
		arg.Lastname,
		arg.Email,
		arg.Password,
	)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}
